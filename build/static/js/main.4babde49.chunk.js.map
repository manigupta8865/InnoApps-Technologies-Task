{"version":3,"sources":["Componenets/HomeScreen.js","Componenets/SigninScreen.js","Componenets/RegisterScreen.js","App.js","serviceWorker.js","index.js"],"names":["HomeScreen","useState","loading","setLoadig","images","setImages","useEffect","fetchLogo","fetch","then","data","ok","Error","json","allImages","catch","err","message","className","type","placeholder","map","image","index","key","src","url","alt","SigninScreen","props","setEmail","setPassword","onSubmit","e","preventDefault","alert","htmlFor","id","name","onChange","target","value","to","RegisterScreen","setName","setRePassword","App","path","exact","component","class","aria-hidden","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.4babde49.chunk.js","sourcesContent":["import React,{useState,useEffect} from 'react'\r\nconst HomeScreen=()=>{\r\n    const [loading,setLoadig]=useState(true)\r\n    const [images,setImages]=useState([])\r\n\r\n    useEffect(()=>{\r\n        fetchLogo()\r\n            \r\n    },[])\r\n    const fetchLogo=()=>{\r\n        fetch('https://api.thedogapi.com/v1/images/search?limit=100')\r\n          .then((data) => {\r\n            if(!data.ok)\r\n            {\r\n                      throw Error(\"not found\")\r\n            }\r\n               \r\n            return data.json()\r\n            .then(allImages=>{\r\n                setImages(allImages)\r\n                setLoadig(false)\r\n            })\r\n            .catch(err=>{\r\n                throw Error(err.message)\r\n            })\r\n            \r\n       \r\n            })\r\n\r\n    }\r\n    \r\n        return( loading?<h1>....loading</h1>:\r\n         <div>  \r\n             <div className=\"SearchInputContainer\">\r\n                 <input type=\"text\"placeholder=\"Search\"/>\r\n             </div> \r\n        <ui className=\"Products\">\r\n                     \r\n                       {\r\n                           images.map((image,index)=>\r\n                             <li key={index}>\r\n                              <div className=\"Product\">\r\n                              <img src={image.url} \r\n                                alt=\"DOGS IMAGES\" className=\"DogImage\">\r\n                              </img>    \r\n                              </div>\r\n                             </li>\r\n                             )\r\n                                           \r\n                       }\r\n             </ui>\r\n             </div>\r\n        )\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\nexport default HomeScreen","import React, { useState } from 'react'\r\nimport {Link} from 'react-router-dom'\r\nfunction SigninScreen(props)\r\n{\r\n    \r\n     const submitData=(e)=>{\r\n          e.preventDefault()\r\n          alert(\"ggggggggggggg\")\r\n    }\r\n    \r\n    const [email,setEmail]=useState(\"\")\r\n    const [password,setPassword]=useState(\"\")\r\n    return(\r\n\r\n        <div className=\"form\">\r\n            <form onSubmit={submitData}>\r\n                \r\n                <ul className=\"form-list-container\">\r\n            \r\n                    <li><h2>Sign-In</h2></li>\r\n                    <li>\r\n                        <label htmlFor=\"email\">Email:</label>\r\n                        <input type=\"email\" id=\"email\"name=\"email\" onChange={(e)=>setEmail(e.target.value)} ></input>\r\n                    </li>\r\n\r\n                    <li>\r\n                        <label htmlFor=\"password\">Password:</label>\r\n                        <input type=\"password\" id=\"password\" name=\"password\"onChange={(e)=>setPassword(e.target.value)} ></input>\r\n                    </li>\r\n\r\n                    <li>\r\n                        <button className=\"button primary\">SignIn</button>\r\n                    </li>\r\n\r\n                    <li>\r\n                        don not have an account- <Link to=\"/register\"className=\"button primary\">Register</Link>\r\n                    </li>\r\n    \r\n\r\n                              \r\n                </ul>\r\n            </form>\r\n            \r\n        </div>\r\n    )\r\n}\r\nexport default SigninScreen","import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport SigninScreen from './SigninScreen'\r\nfunction RegisterScreen(props)\r\n{\r\n    \r\n    const submitData=(e)=>{\r\n          e.preventDefault()\r\n          alert(\"dddddd\")    }\r\n    const [name,setName]=useState(\"\")\r\n    const [email,setEmail]=useState(\"\")\r\n    const [password,setPassword]=useState(\"\")\r\n    const [Repassword,setRePassword]=useState(\"\")\r\n    return(\r\n\r\n        <div className=\"form\">\r\n            <form onSubmit={submitData}>\r\n                \r\n                <ul className=\"form-list-container\">\r\n                    \r\n                    <li><h2>Register-here</h2></li>\r\n\r\n                    <li>\r\n                        <label htmlFor=\"name\">Name:</label>\r\n                        <input type=\"name\" id=\"name\"name=\"name\" onChange={(e)=>setName(e.target.value)} ></input>\r\n                    </li>\r\n\r\n                    <li>\r\n                        <label htmlFor=\"email\">Email:</label>\r\n                        <input type=\"email\" id=\"email\"name=\"email\" onChange={(e)=>setEmail(e.target.value)} ></input>\r\n                    </li>\r\n\r\n                    <li>\r\n                        <label htmlFor=\"password\">Password:</label>\r\n                        <input type=\"password\" id=\"password\" name=\"password\"onChange={(e)=>setPassword(e.target.value)} ></input>\r\n                    </li>\r\n\r\n\r\n                    <li>\r\n                        <label htmlFor=\"RePassword\">Re-Password:</label>\r\n                        <input type=\"RePassword\" id=\"password\" name=\"RePassword\"onChange={(e)=>setRePassword(e.target.value)} ></input>\r\n                    </li>\r\n\r\n                    <li>\r\n                        <button className=\"button primary\">Register</button>\r\n                    </li>\r\n\r\n                    <li>\r\n                    Already have an Account?<Link to=\"/signin\" className=\"button primary\">SignIn</Link>\r\n                    </li>\r\n                \r\n\r\n                    \r\n                </ul>\r\n            </form>\r\n            \r\n        </div>\r\n    )\r\n}\r\nexport default RegisterScreen","import React from 'react';\nimport { BrowserRouter, Link, Route } from 'react-router-dom';\nimport HomeScreen from './Componenets/HomeScreen';\nimport SigninScreen from './Componenets/SigninScreen';\nimport RegisterScreen from './Componenets/RegisterScreen';\nimport 'font-awesome/css/font-awesome.min.css';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n <div className='grid-container'>\n        <header>\n          <div className=\"header\">\n              <div className='brand'>\n                  <Link to=\"/\">aInnoApps Technologies</Link>\n              \n              </div>\n              <div className=\"Header-Img\">\n                <Link to=\"/\">\n                    <img src=\"https://aperfectspace.com/images/new-home-logo-black.png\"alt=\"Logo\"></img>\n                </Link>\n                </div>\n      \n            <div className='header-links'>\n              <Link to=''>About</Link>\n              <Link to=''>Contact Us</Link>\n              <Link to=\"/signin\">LogIn</Link>\n              <Link to=\"/register\">SignIn</Link>\n            </div>\n          </div>\n        </header>\n\n     \n    \n    <main>\n        <div className=\"main\">\n              <Route path=\"/\" exact={true} component={HomeScreen}/> \n              <Route path=\"/register\" component={RegisterScreen}/> \n              <Route path=\"/signin\" component={SigninScreen}/>           \n        </div>\n    </main>\n\n\n    <footer className=\"footer\">\n           <p>@2020 by Munish Kumar- Reserved All</p>\n           <div className=\"Social-Icon-Container\">\n           <i class=\"fa fa-facebook-square\" aria-hidden=\"true\"></i>\n           <i class=\"fa fa-instagram\" aria-hidden=\"true\"></i>\n           <i class=\"fa fa-envelope\" aria-hidden=\"true\"></i>\n           <i class=\"fa fa-twitter\" aria-hidden=\"true\"></i>\n           </div>\n    </footer>\n    </div>\n    </BrowserRouter>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}